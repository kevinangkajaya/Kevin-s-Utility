@page "/wealth"
@inject IConfiguration Configuration
@inject HttpClient Http

<PageTitle>Wealth</PageTitle>

<h1>Wealth</h1>

<div class="text-end">
    <button class="btn btn-primary" @onclick="NewItem">New Item</button>
</div>
error: @errorMsg
<div class="mt-3">
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>ID</th>
                <th>Location</th>
                <th>Sublocation</th>
                <th>Active</th>
                <th>Value</th>
                <th>Value in Rupiah</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @if (result != null && result.Count > 0)
            {
                foreach (var datum in result)
                {
                    <tr>
                        <td>@datum.ID</td>
                        <td>@datum.Location</td>
                        <td>@datum.Sublocation</td>
                        <td>
                            @if (datum.Active)
                            {
                                <span class="oi oi-check" style="color: green;" aria-hidden="true" />
                            }
                        </td>
                        <td class="text-end">@datum.ValueString</td>
                        <td class="text-end">@datum.ValueInRupiahString</td>
                        <td class="">
                            <span class="oi oi-pencil" style="cursor:pointer" @onclick="((e) => UpdateItem(e, datum.ID))"
                                aria-hidden="true" />
                            <span class="oi oi-trash" style="cursor:pointer" @onclick="((e) => DeleteItem(e, datum.ID))"
                                aria-hidden="true" />
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td class="text-center" colspan="6">@errorMsg</td>
                </tr>
            }
        </tbody>
    </table>

</div>

@code {
    private string errorMsg = "";
    List<ResultStruct> result = new List<ResultStruct>();

    public class ResultStruct
    {
        public int ID { set; get; }
        public string Location { set; get; } = "";
        public string Sublocation { set; get; } = "";
        public bool Active { set; get; }
        public double Value { set; get; }
        public double ValueInRupiah { set; get; }

        public string ValueString => $"{Value:n7}";
        public string ValueInRupiahString => $"{ValueInRupiah:n2}";
    }

    private string GetWealthApiUrl(string suffix, string queryString = "")
    {
        var url = Configuration["WealthApiUrl"] + suffix;
        if (queryString != "")
        {
            url += "?" + queryString;
        }
        return url;
    }

    protected override async Task OnInitializedAsync()
    {
        await GetFibonacci();
    }

    protected async Task GetFibonacci()
    {
        result = new List<ResultStruct>();
        try
        {
            var queryString = System.Web.HttpUtility.ParseQueryString(string.Empty);
            @* queryString.Add("fn", fn.ToString()); *@

            result = await Http.GetFromJsonAsync<List<ResultStruct>>(GetWealthApiUrl("wealth/get",
            queryString.ToString()));
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }

        if (result == null || result.Count == 0)
        {
            errorMsg = "No data";
        }
    }

    private async Task NewItem()
    {
        var success = false;
        try
        {
            double x = 0.00856369;
            double y = 202052.276;
            var postBody = new
            {
                Location = "Tokocrypto",
                Sublocation = "ETH",
                Active = true,
                Value = x,
                ValueInRupiah = y
            };

            var response = await Http.PostAsJsonAsync(GetWealthApiUrl("wealth/new"), postBody);
            if (response.IsSuccessStatusCode)
            {
                var stringData = await response.Content.ReadAsStringAsync();
                success = Boolean.Parse(stringData);
            }
            else
            {
                throw new Exception(response.ReasonPhrase);
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }

        if (!success)
        {
            errorMsg = "Create New Item failed";
        }
    }

    private async Task UpdateItem(MouseEventArgs e, int ID)
    {
        Console.WriteLine("update " + ID);
        ResultStruct resultStruct = result.First(x => x.ID == ID);

        var success = false;
        try
        {
            double x = 0.00856369;
            double y = 202052.276;
            var body = new
            {
                ID = ID,
                Location = "Tokocrypto",
                Sublocation = "ETH",
                Active = true,
                Value = x,
                ValueInRupiah = y
            };

            var response = await Http.PutAsJsonAsync(GetWealthApiUrl("wealth/update"), body);
            if (response.IsSuccessStatusCode)
            {
                var stringData = await response.Content.ReadAsStringAsync();
                success = Boolean.Parse(stringData);
            }
            else
            {
                throw new Exception(response.ReasonPhrase);
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }

        if (!success)
        {
            errorMsg = "Update Item failed";
        }
    }

    private async Task DeleteItem(MouseEventArgs e, int ID)
    {
        Console.WriteLine("delete " + ID);
        @* int index = result.FindIndex(x => x.ID == ID);
result.RemoveAt(index); *@

        var success = false;
        try
        {
            var body = new
            {
                ID = ID
            };

            var response = await Http.DeleteAsync(GetWealthApiUrl($"wealth/delete/{ID}"));
            if (response.IsSuccessStatusCode)
            {
                var stringData = await response.Content.ReadAsStringAsync();
                success = Boolean.Parse(stringData);
            }
            else
            {
                throw new Exception(response.ReasonPhrase);
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }

        if (!success)
        {
            errorMsg = "Delete Item failed";
        }
    }
}
