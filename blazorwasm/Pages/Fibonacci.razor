@page "/fibonacci"
@using System.Text.Json
@using System.Text.Json.Serialization
@inject HttpClient Http
@inject IConfiguration Configuration

<PageTitle>Fibonacci</PageTitle>

<h1>Fibonacci</h1>

<div class="">
    @* <input type="number" class="form-control" @bind="fiboLoop" placeholder="Input loop of fibonacci" /> *@
    <label for="fibInput">Input fibonacci n term (min: 1, max: 180)</label>
    <input id="fibInput" min="0" max="180" type="number" class="form-control" @onchange="OnChange" />
    @* <button class="btn btn-primary ms-2" @onclick="Submit">Submit</button> *@
</div>

<div class="mt-2">
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Fn</th>
                <th>Value</th>
            </tr>
        </thead>
        <tbody>
            @if (result != null && result.Count > 0)
            {
                foreach (var datum in result)
                {
                    <tr>
                        <td>@datum.NTerm</td>
                        <td class="text-end">@datum.Value</td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td class="text-center" colspan="2">@errorMsg</td>
                </tr>
            }
        </tbody>
    </table>

</div>

@code {
    @* private int fiboLoop = 0; *@
    private List<ResultStruct> result = new List<ResultStruct>();
    private string errorMsg = "";

    public class ResultStruct
    {
        public int NTerm { get; set; }
        public string Value { get; set; } = "";
    }

    private string GetFibonacciApiUrl(string suffix, string queryString = "")
    {
        var url = Configuration["fibonacciApiUrl"] + suffix;
        if (queryString != "")
        {
            url += "?" + queryString;
        }
        return url;
    }

    protected async Task<List<ResultStruct>> GetFibonacci(int fn)
    {
        var fibonacciGet = new List<ResultStruct>();
        try
        {
            var queryString = System.Web.HttpUtility.ParseQueryString(string.Empty);
            queryString.Add("fn", fn.ToString());

            fibonacciGet = await Http.GetFromJsonAsync<List<ResultStruct>>(GetFibonacciApiUrl("fibonacci/get",
            queryString.ToString()));
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
        return fibonacciGet;
    }

    private async Task OnChange(ChangeEventArgs e)
    {
        result = new List<ResultStruct>();
        errorMsg = "";

        int fn = 0;
        if (e != null && e.Value != null)
        {
            bool success = int.TryParse(e.Value.ToString(), out fn);
        }

        if (fn <= 0)
        {
            errorMsg = "Number should be above 0";
            return;
        }
        else if (fn > 180)
        {
            errorMsg = "Number cannot not exceed 180";
            return;
        };

        result = await GetFibonacci(fn);
        if (result == null || result.Count == 0)
        {
            errorMsg = "No data";
        }
    }

}
